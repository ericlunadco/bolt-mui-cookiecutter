import {
  MobileTimePicker
} from "./chunk-PSPRDUOA.js";
import "./chunk-AB6VPCER.js";
import {
  DesktopTimePicker
} from "./chunk-5JT4RLPU.js";
import "./chunk-LMLIM6IC.js";
import {
  TimePickerToolbar,
  timePickerToolbarClasses
} from "./chunk-L2TK2W5T.js";
import "./chunk-HLH5U2HY.js";
import "./chunk-XSJXSC6J.js";
import "./chunk-XXRSAQAS.js";
import "./chunk-U6K5546U.js";
import {
  DEFAULT_DESKTOP_MODE_MEDIA_QUERY
} from "./chunk-W3EAUS3T.js";
import "./chunk-ZSGOA7PU.js";
import "./chunk-TTAICKHP.js";
import "./chunk-IW5CNG3T.js";
import "./chunk-UBXNCQMI.js";
import "./chunk-LG6YD673.js";
import "./chunk-AYSIRO5H.js";
import "./chunk-UM2AM6CA.js";
import {
  useMediaQuery_default
} from "./chunk-TBGM6OAP.js";
import "./chunk-5LSG3INP.js";
import "./chunk-EKGZJNJH.js";
import "./chunk-GEZQE4YU.js";
import "./chunk-AT3UHVXM.js";
import "./chunk-DICGE6K4.js";
import "./chunk-DPTLDS7J.js";
import "./chunk-6UPHNPRZ.js";
import "./chunk-OFJJHE6M.js";
import "./chunk-DKEL2SFW.js";
import "./chunk-2WIO4BEN.js";
import "./chunk-HRR3TUQG.js";
import "./chunk-J6EZOTWR.js";
import "./chunk-VFDRQLQ2.js";
import "./chunk-LFTAGM2U.js";
import "./chunk-5LXXXVZL.js";
import "./chunk-MZFOKSJ2.js";
import "./chunk-EYAVX66N.js";
import "./chunk-A6WLXCR6.js";
import "./chunk-VMHE2GQJ.js";
import "./chunk-QSJVTIHY.js";
import "./chunk-ESOUGFTQ.js";
import "./chunk-C27MERTG.js";
import "./chunk-ZYIA37SR.js";
import "./chunk-6P2T3JS5.js";
import "./chunk-PLAD6PAG.js";
import "./chunk-PVDV4LRD.js";
import "./chunk-GFBMZKEA.js";
import "./chunk-R3IMISK3.js";
import "./chunk-QPFXILZY.js";
import "./chunk-BDFDOFTV.js";
import "./chunk-NHLSN5KH.js";
import "./chunk-P6WU5KR5.js";
import "./chunk-M4YCUY3G.js";
import "./chunk-3HPN5KNE.js";
import "./chunk-PR6ZCO7G.js";
import "./chunk-AKKANAVW.js";
import "./chunk-GZC274JI.js";
import "./chunk-YAK22GO4.js";
import "./chunk-E4QJTFZD.js";
import "./chunk-FP4SE3PP.js";
import "./chunk-ZTLTEDFR.js";
import "./chunk-WBPTNYHC.js";
import "./chunk-GL7A3CVS.js";
import "./chunk-ETSMMGKH.js";
import "./chunk-ZOKU5DI5.js";
import "./chunk-RUVZR4WX.js";
import "./chunk-L4X2SGDE.js";
import "./chunk-BR45TNTW.js";
import "./chunk-LRLI6D3S.js";
import "./chunk-AACZXOME.js";
import "./chunk-BLENMCZS.js";
import {
  _objectWithoutPropertiesLoose
} from "./chunk-YR5LAKKR.js";
import "./chunk-JE6D3GRK.js";
import "./chunk-RT7NNWU5.js";
import "./chunk-SBWM267K.js";
import "./chunk-ZL6TLYTQ.js";
import "./chunk-7G63SIWZ.js";
import "./chunk-JI5YNREI.js";
import "./chunk-RCG66HLC.js";
import "./chunk-5EUHVJJO.js";
import "./chunk-5O5BTS2P.js";
import "./chunk-GTD3O4OX.js";
import "./chunk-7AI65IGY.js";
import "./chunk-6FFKAP2Y.js";
import "./chunk-65DSTX56.js";
import "./chunk-ZIWYVGJY.js";
import "./chunk-LTU3NNRQ.js";
import "./chunk-MU3OIUEL.js";
import "./chunk-AHQ5JDS6.js";
import {
  useThemeProps
} from "./chunk-5PZXCABI.js";
import "./chunk-6F3VBANY.js";
import "./chunk-S7G7D52Q.js";
import "./chunk-5CWFXFHS.js";
import "./chunk-7B6AJBW2.js";
import "./chunk-NSKQHLUX.js";
import "./chunk-AA5XXLR4.js";
import {
  require_jsx_runtime
} from "./chunk-IULEFUF5.js";
import {
  refType_default
} from "./chunk-COXX4LJE.js";
import "./chunk-BS3UPUQO.js";
import {
  require_prop_types
} from "./chunk-SGWTPM65.js";
import "./chunk-T5TDCSU7.js";
import "./chunk-FZMQVSBU.js";
import {
  _extends
} from "./chunk-EQCCHGRT.js";
import "./chunk-UCC7ZGPY.js";
import "./chunk-TPTFS77Q.js";
import "./chunk-L2P6ZJGI.js";
import {
  require_react
} from "./chunk-I773Y2XN.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/@mui/x-date-pickers/TimePicker/TimePicker.js
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["desktopModeMediaQuery"];
var TimePicker = React.forwardRef(function TimePicker2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiTimePicker"
  });
  const {
    desktopModeMediaQuery = DEFAULT_DESKTOP_MODE_MEDIA_QUERY
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const isDesktop = useMediaQuery_default(desktopModeMediaQuery, {
    defaultMatches: true
  });
  if (isDesktop) {
    return (0, import_jsx_runtime.jsx)(DesktopTimePicker, _extends({
      ref
    }, other));
  }
  return (0, import_jsx_runtime.jsx)(MobileTimePicker, _extends({
    ref
  }, other));
});
true ? TimePicker.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * 12h/24h view for hour selection clock.
   * @default utils.is12HourCycleInCurrentLocale()
   */
  ampm: import_prop_types.default.bool,
  /**
   * Display ampm controls under the clock (instead of in the toolbar).
   * @default true on desktop, false on mobile
   */
  ampmInClock: import_prop_types.default.bool,
  /**
   * If `true`, the main element is focused during the first mount.
   * This main element is:
   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
   * - the `input` element if there is a field rendered.
   */
  autoFocus: import_prop_types.default.bool,
  className: import_prop_types.default.string,
  /**
   * If `true`, the popover or modal will close after submitting the full date.
   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
   */
  closeOnSelect: import_prop_types.default.bool,
  /**
   * The default value.
   * Used when the component is not controlled.
   */
  defaultValue: import_prop_types.default.object,
  /**
   * CSS media query when `Mobile` mode will be changed to `Desktop`.
   * @default '@media (pointer: fine)'
   * @example '@media (min-width: 720px)' or theme.breakpoints.up("sm")
   */
  desktopModeMediaQuery: import_prop_types.default.string,
  /**
   * If `true`, the picker and text field are disabled.
   * @default false
   */
  disabled: import_prop_types.default.bool,
  /**
   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disableFuture: import_prop_types.default.bool,
  /**
   * Do not ignore date part when validating min/max time.
   * @default false
   */
  disableIgnoringDatePartForTimeValidation: import_prop_types.default.bool,
  /**
   * If `true`, the open picker button will not be rendered (renders only the field).
   * @default false
   */
  disableOpenPicker: import_prop_types.default.bool,
  /**
   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disablePast: import_prop_types.default.bool,
  /**
   * @default false
   */
  enableAccessibleFieldDOMStructure: import_prop_types.default.any,
  /**
   * Format of the date when rendered in the input(s).
   * Defaults to localized format based on the used `views`.
   */
  format: import_prop_types.default.string,
  /**
   * Density of the format when rendered in the input.
   * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
   * @default "dense"
   */
  formatDensity: import_prop_types.default.oneOf(["dense", "spacious"]),
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: refType_default,
  /**
   * The label content.
   */
  label: import_prop_types.default.node,
  /**
   * Locale for components texts.
   * Allows overriding texts coming from `LocalizationProvider` and `theme`.
   */
  localeText: import_prop_types.default.object,
  /**
   * Maximal selectable time.
   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
   */
  maxTime: import_prop_types.default.object,
  /**
   * Minimal selectable time.
   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
   */
  minTime: import_prop_types.default.object,
  /**
   * Step over minutes.
   * @default 1
   */
  minutesStep: import_prop_types.default.number,
  /**
   * Name attribute used by the `input` element in the Field.
   */
  name: import_prop_types.default.string,
  /**
   * Callback fired when the value is accepted.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @param {TValue} value The value that was just accepted.
   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
   */
  onAccept: import_prop_types.default.func,
  /**
   * Callback fired when the value changes.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @param {TValue} value The new value.
   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
   */
  onChange: import_prop_types.default.func,
  /**
   * Callback fired when the popup requests to be closed.
   * Use in controlled mode (see `open`).
   */
  onClose: import_prop_types.default.func,
  /**
   * Callback fired when the error associated with the current value changes.
   * When a validation error is detected, the `error` parameter contains a non-null value.
   * This can be used to render an appropriate form error.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @param {TError} error The reason why the current value is not valid.
   * @param {TValue} value The value associated with the error.
   */
  onError: import_prop_types.default.func,
  /**
   * Callback fired when the popup requests to be opened.
   * Use in controlled mode (see `open`).
   */
  onOpen: import_prop_types.default.func,
  /**
   * Callback fired when the selected sections change.
   * @param {FieldSelectedSections} newValue The new selected sections.
   */
  onSelectedSectionsChange: import_prop_types.default.func,
  /**
   * Callback fired on view change.
   * @template TView
   * @param {TView} view The new view.
   */
  onViewChange: import_prop_types.default.func,
  /**
   * Control the popup or dialog open state.
   * @default false
   */
  open: import_prop_types.default.bool,
  /**
   * The default visible view.
   * Used when the component view is not controlled.
   * Must be a valid option from `views` list.
   */
  openTo: import_prop_types.default.oneOf(["hours", "meridiem", "minutes", "seconds"]),
  /**
   * Force rendering in particular orientation.
   */
  orientation: import_prop_types.default.oneOf(["landscape", "portrait"]),
  readOnly: import_prop_types.default.bool,
  /**
   * If `true`, disable heavy animations.
   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
   */
  reduceAnimations: import_prop_types.default.bool,
  /**
   * The date used to generate the new value when both `value` and `defaultValue` are empty.
   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.
   */
  referenceDate: import_prop_types.default.object,
  /**
   * The currently selected sections.
   * This prop accepts four formats:
   * 1. If a number is provided, the section at this index will be selected.
   * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
   * 3. If `"all"` is provided, all the sections will be selected.
   * 4. If `null` is provided, no section will be selected.
   * If not provided, the selected sections will be handled internally.
   */
  selectedSections: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["all", "day", "empty", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), import_prop_types.default.number]),
  /**
   * Disable specific time.
   * @template TDate
   * @param {TDate} value The value to check.
   * @param {TimeView} view The clock type of the timeValue.
   * @returns {boolean} If `true` the time will be disabled.
   */
  shouldDisableTime: import_prop_types.default.func,
  /**
   * If `true`, disabled digital clock items will not be rendered.
   * @default false
   */
  skipDisabled: import_prop_types.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types.default.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * Amount of time options below or at which the single column time renderer is used.
   * @default 24
   */
  thresholdToRenderTimeInASingleColumn: import_prop_types.default.number,
  /**
   * The time steps between two time unit options.
   * For example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.
   * When single column time renderer is used, only `timeStep.minutes` will be used.
   * @default{ hours: 1, minutes: 5, seconds: 5 }
   */
  timeSteps: import_prop_types.default.shape({
    hours: import_prop_types.default.number,
    minutes: import_prop_types.default.number,
    seconds: import_prop_types.default.number
  }),
  /**
   * Choose which timezone to use for the value.
   * Example: "default", "system", "UTC", "America/New_York".
   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
   */
  timezone: import_prop_types.default.string,
  /**
   * The selected value.
   * Used when the component is controlled.
   */
  value: import_prop_types.default.object,
  /**
   * The visible view.
   * Used when the component view is controlled.
   * Must be a valid option from `views` list.
   */
  view: import_prop_types.default.oneOf(["hours", "meridiem", "minutes", "seconds"]),
  /**
   * Define custom view renderers for each section.
   * If `null`, the section will only have field editing.
   * If `undefined`, internally defined view will be used.
   */
  viewRenderers: import_prop_types.default.shape({
    hours: import_prop_types.default.func,
    meridiem: import_prop_types.default.func,
    minutes: import_prop_types.default.func,
    seconds: import_prop_types.default.func
  }),
  /**
   * Available views.
   */
  views: import_prop_types.default.arrayOf(import_prop_types.default.oneOf(["hours", "minutes", "seconds"]).isRequired)
} : void 0;
export {
  TimePicker,
  TimePickerToolbar,
  timePickerToolbarClasses
};
//# sourceMappingURL=@mui_x-date-pickers_TimePicker.js.map
